# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path
# Using https://github.com/Jikoo/OpenInv/blob/master/.github/workflows/ci.yml as a model

name: Maven Package

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    environment: deployment
    name: Build JAR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      version: ${{ steps.variables.outputs.version }}
      version-unique: ${{ steps.variables.outputs.version }}-${{ steps.variables.outputs.unique }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: ${{ secrets.OSS_USER }}
        server-password: ${{ secrets.OSS_PASSWORD }}
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    # Use cache to speed up build
    - name: Cache Maven Repo
      uses: actions/cache@v2
      id: cache
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATEKEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Publish to maven repo
      run: mvn --batch-mode deploy #-s $GITHUB_WORKSPACE/settings.xml
      continue-on-error: true # if already published, do not block
      env:
        OSS_USER: ${{ secrets.OSS_USER }}
        OSS_PASSWORD: ${{ secrets.OSS_PASSWORD }}

    - name: Setup variables
      id: variables
      run: |
       echo "::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)"
       echo "::set-output name=unique::$(date +%s)"
      shell: sh
    
    # Upload artifacts
    - name: Upload Distributable Jar
      id: upload-final
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: ./target/citizenstext-${{ steps.variables.outputs.version }}.jar
        
  release:
    name: Create Github Release
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.7

      #- name: Generate changelog
      #  id: changelog_step
      #  uses: heinrichreimer/action-github-changelog-generator@v2.2

      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v0.1.12
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: CitizensText ${{ needs.build.outputs.version-unique }}
          body: ${{ steps.changelog_step.outputs.changelog }}
          tag_name: ${{ needs.build.outputs.version-unique }}
          draft: true
          prerelease: false
          files: ./dist/citizenstext-${{ needs.build.outputs.version }}.jar
